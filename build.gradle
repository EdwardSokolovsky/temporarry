plugins {
    id 'org.gradle.playframework' // Подключаем Play Framework
    id 'scala'
    id 'com.github.maiflai.scalatest'
    id 'application'
}

group = 'ru.ss.csc'
version = '1.2.3'
scalaVersion = '2.13.14'

repositories {
    mavenCentral()
    maven {
        url 'https://repo.typesafe.com/typesafe/releases/'
    }
}

dependencies {
    // Основные зависимости
    implementation "com.typesafe.play:play_2.13:2.8.20"
    implementation "org.scalatestplus.play:scalatestplus-play_2.13:7.0.1"
    implementation "org.scalamock:scalamock_2.13:6.0.0"
    implementation "org.postgresql:postgresql:42.7.4"
    implementation "org.scalikejdbc:scalikejdbc_2.13:4.3.2"
    implementation "org.scalikejdbc:scalikejdbc-core_2.13:4.3.2"
    implementation "org.scalikejdbc:scalikejdbc-config_2.13:4.3.2"
    implementation "org.scalikejdbc:scalikejdbc-play-initializer_2.13:2.8.0-scalikejdbc-4.0"
    implementation "org.scalikejdbc:scalikejdbc-syntax-support-macro_2.13:4.3.2"
    implementation "org.liquibase:liquibase-core:4.20.0"
    implementation "org.apache.kafka:kafka-clients:2.4.0"

    testImplementation "org.scalatestplus.play:scalatestplus-play_2.13:7.0.1"
    testImplementation "org.scalamock:scalamock_2.13:6.0.0"

    // dependencyOverrides (исключения для версий библиотек)
    implementation("org.scala-lang.modules:scala-java8-compat_2.13:1.0.2") {
        because("override conflicting version")
    }
    implementation("com.fasterxml.jackson.core:jackson-databind:2.13.5") {
        because("override conflicting version")
    }
    implementation("org.scala-lang.modules:scala-parser-combinators_2.13:2.4.0") {
        because("override conflicting version")
    }
    implementation("org.slf4j:slf4j-api:1.7.36") {
        because("override conflicting version")
    }
    implementation("org.yaml:snakeyaml:2.3") {
        because("override conflicting version")
    }
}


configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.webjars' && details.requested.name == 'npm') {
            details.useTarget group: 'org.webjars', name: 'npm', version: '0' // Идентифицируем исключение
        }
    }
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ['-feature', '-deprecation', '-Werror']
}

application {
    mainClass = 'Main' // Укажите главный класс вашего приложения
}

ext {
    compilationTime = Instant.now().toEpochMilli().toString()
    gitCommitHash = 'git rev-parse HEAD'.execute().text.trim()
}

jar {
    manifest {
        attributes(
                'Implementation-Version': compilationTime,
                'Implementation-Title': gitCommitHash
        )
    }
}

task copyManifest(type: Copy) {
    def jarFile = tasks.jar.archiveFile.get().asFile
    def jarFileNameSans = "${project.group}.${project.name}-${project.version}-sans-externalized-jar.jar"
    def location = "${buildDir}/libs"
    def jarFilePathSans = file("${location}/${jarFileNameSans}")

    from zipTree(jarFile).matching { include 'META-INF/MANIFEST.MF' }
    into jarFilePathSans.parent
    rename 'MANIFEST.MF', 'META-INF/MANIFEST.MF'
}

task rollout {
    dependsOn copyManifest, distZip
    doLast {
        def zipFile = tasks.distZip.archiveFile.get().asFile
        def zipTopDir = project.name

        println "Updating..."
        copy {
            from zipTree(zipFile)
            into "$buildDir/rollout"
            includeEmptyDirs = false
            eachFile { file ->
                // обработка файлов при копировании
            }
        }

        def removeConfigFile = { String fileName, String details ->
            def location = "$zipTopDir/conf/$fileName"
            println "Removing $location..."
            delete "$buildDir/rollout/$location"
        }

        removeConfigFile("dev.conf", "")
        removeConfigFile("dev/developers", "")
        removeConfigFile("dev/variables", "")
    }
}

tasks.withType(Test) {
    useTestNG()
    reports {
        junitXml.enabled = true
        html.enabled = true
        junitXml.destination = file("$buildDir/test-results")
        html.destination = file("$buildDir/reports/tests")
    }
    systemProperty 'testReportDir', "$buildDir/test-report"
}

configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'com.example') {
            details.useTarget group: 'com.example', name: 'my-library_2.13', version: '1.0.0'
        }
    }
}
